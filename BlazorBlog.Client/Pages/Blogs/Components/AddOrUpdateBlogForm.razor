<EditForm Model="@Command" OnValidSubmit="@OnValidSubmitAsync">
    <FluentValidationValidator />
    <div class="row mb-3">
        <div class="col-12">
            <label class="w-100">Title:
                <InputText class="form-control" @bind-Value="Command.Title" />
            </label>
            <ValidationMessage For="@(() => Command.Title)" />
        </div>
    </div>
    <div class="row mb-3">
        <div class="col-12">
            <label class="w-100">Description:
                <InputTextArea class="form-control" @bind-Value="Command.Description" rows="10"/>
            </label>
            <ValidationMessage For="@(() => Command.Description)" />
        </div>
    </div>
    <div class="d-flex align-items-center gap-1">
        <button class="btn btn-primary" type="submit">Submit</button>
        <a class="btn btn-outline-danger" href="@Routes.Pages.Blogs.Index">Cancel</a>
    </div>
</EditForm>

@code {

    [Parameter, EditorRequired]
    public AddOrUpdateBlogCommand Command { get; set; } = null!;

    [Inject]
    private HttpClient HttpClient { get; set; } = null!;

    [Inject]
    public NavigationManager NavigationManager { get; set; } = null!;

    private bool IsEditingExistingBlog => Command.Id != null;

    private async Task OnValidSubmitAsync()
    {

        HttpResponseMessage response;
        if (IsEditingExistingBlog)
        {
            response = await HttpClient.PutAsJsonAsync(Routes.Api.Blogs.Update, Command);
        }
        else
        {

            response = await HttpClient.PostAsJsonAsync(Routes.Api.Blogs.Add, Command);
        }

        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo(Routes.Pages.Blogs.Index);
        }

    }

}
