@using Humanizer
@attribute [Route(Routes.Pages.BlogPosts.Index)]
<PageTitle>Blog Posts</PageTitle>
<div class="d-flex align-items-center justify-content-between">
    <h3>Blog Posts</h3>
    <a class="btn btn-outline-primary" href="@Routes.Pages.BlogPosts.Add.Format(BlogId)">Add Post</a>
</div>

@if(_posts is null)
{
    <div>Loading..</div>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
            <th>Title</th>
            <th>Created</th>
            <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var post in _posts)
            {
                <tr>
                  <td>@post.Title</td>
                  <td>@post.CreatedAt.Humanize()</td>
                  <td>
                      <button class="btn btn-outline-primary" @onclick="@(() => GotToViewPage(post))">View</button>
                      <button class="btn btn-outline-primary" @onclick="@(()=> GotToEditPage(post))">Edit</button>
                  </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {

    [Parameter]
    public Guid BlogId { get; set; }

    [Inject]
    public HttpClient HttpClient { get; set; } = null!;

    [Inject]
    public NavigationManager NavigationManager { get; set; } = null!;

    private List<BlogPostDto>? _posts;

    protected override async Task OnInitializedAsync()
    {
        _posts = await HttpClient.GetFromJsonAsync<List<BlogPostDto>>(Routes.Api.BlogPosts.GetAll.Format(BlogId));
    }


    private void GotToEditPage(BlogPostDto post)
    {

        var route = Routes.Pages.BlogPosts.Edit.Format(BlogId, post.Id);
        NavigationManager.NavigateTo(route);
    }

    private void GotToViewPage(BlogPostDto post)
    {
        var route = Routes.Pages.BlogPosts.View.Format(BlogId, post.Id);
        NavigationManager.NavigateTo(route);
    }
}
